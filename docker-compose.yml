name: twenty

services:
  db:
    image: postgres:16
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"   # optional (for local psql/GUI)
    environment:
      POSTGRES_USER: ${PG_DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${PG_DATABASE_NAME:-postgres}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -h 127.0.0.1 -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 2s
      timeout: 5s
      retries: 30
      start_period: 10s
    restart: always
    networks: [dev-net]

  # one-shot gate that proves cross-container reachability
  db-wait:
    image: postgres:16-alpine
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -lc 'i=0; until pg_isready -h db -p 5432; do
                i=$$((i+1)); [ $$i -ge 120 ] && echo "DB wait timeout" && exit 1;
                echo "waiting for db..."; sleep 1;
              done; echo "DB ready."'
    restart: "no"
    networks: [dev-net]

  migrate:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./services/twenty-core:/app:ro
    environment:
      DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/postgres
      PGHOST: db
      PGPORT: "5432"
      PGUSER: ${PG_DATABASE_USER:-postgres}
      PGPASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      PGDATABASE: postgres
    depends_on:
      db: { condition: service_healthy }
      db-wait: { condition: service_completed_successfully }
    networks: [dev-net]
    command: >
      sh -lc ' 
        corepack enable &&
        (yarn --immutable || yarn) &&
        (yarn nx database:reset --configuration=no-seed || yarn nx database:migrate)
      '

  redis:
    image: redis:7-alpine
    command: ["--maxmemory-policy", "noeviction"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 5s
      retries: 30
    restart: always
    networks: [dev-net]

  server:
    image: twentycrm/twenty:${TAG:-latest}
    profiles: ["fast"]
    volumes:
      - server-local-data:/app/packages/twenty-server/.local-storage
    ports:
      - "3000:3000"
    environment:
      NODE_PORT: 3000
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      PGHOST: db
      PGPORT: "5432"
      PGDATABASE: ${PG_DATABASE_NAME:-postgres}
      PGUSER: ${PG_DATABASE_USER:-postgres}
      PGPASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      PGSSLMODE: disable
      IS_CONFIG_VARIABLES_IN_DB_ENABLED: "false"
      DISABLE_DB_MIGRATIONS: "false"
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      SERVER_URL: ${SERVER_URL}
      DISABLE_CRON_JOBS_REGISTRATION: ${DISABLE_CRON_JOBS_REGISTRATION}
      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
      APP_SECRET: ${APP_SECRET:-replace_me_with_a_random_string}
    depends_on:
      db:
        condition: service_healthy
      db-wait:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/healthz"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: always
    networks: [dev-net]

  server-src:
    build:
      context: ./services/twenty-core
      dockerfile: ./packages/twenty-docker/twenty/Dockerfile
    profiles: ["source"]
    volumes:
      - server-local-data:/app/packages/twenty-server/.local-storage
    ports:
      - "3000:3000"
    environment:
      NODE_PORT: 3000
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      PGHOST: db
      PGPORT: "5432"
      PGDATABASE: ${PG_DATABASE_NAME:-postgres}
      PGUSER: ${PG_DATABASE_USER:-postgres}
      PGPASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      PGSSLMODE: disable
      IS_CONFIG_VARIABLES_IN_DB_ENABLED: "false"
      DISABLE_DB_MIGRATIONS: "false"
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      SERVER_URL: ${SERVER_URL}
      DISABLE_CRON_JOBS_REGISTRATION: ${DISABLE_CRON_JOBS_REGISTRATION}
      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
      APP_SECRET: ${APP_SECRET:-replace_me_with_a_random_string}
    depends_on:
      db:
        condition: service_healthy
      db-wait:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/healthz"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: always
    networks: [dev-net]

  worker:
    image: twentycrm/twenty:${TAG:-v1.4.0}
    command: ["yarn","worker:prod"]
    environment:
      DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      PG_DATABASE_URL: ${DATABASE_URL}
      PGHOST: db
      PGPORT: "5432"
      PGDATABASE: ${PG_DATABASE_NAME:-postgres}
      PGUSER: ${PG_DATABASE_USER:-postgres}
      PGPASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      PGSSLMODE: disable
      IS_CONFIG_VARIABLES_IN_DB_ENABLED: "false"
      DISABLE_DB_MIGRATIONS: "true"
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      server: { condition: service_healthy }
    restart: always
    networks: [dev-net]

  worker-src:
    build:
      context: ./services/twenty-core
      dockerfile: ./packages/twenty-docker/twenty/Dockerfile
    profiles: ["source"]
    command: ["yarn", "worker:prod"]
    environment:
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      SERVER_URL: ${SERVER_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@db:5432/${PG_DATABASE_NAME:-postgres}
      PGHOST: db
      PGPORT: "5432"
      PGDATABASE: ${PG_DATABASE_NAME:-postgres}
      PGUSER: ${PG_DATABASE_USER:-postgres}
      PGPASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      PGSSLMODE: disable
      IS_CONFIG_VARIABLES_IN_DB_ENABLED: "false"
      DISABLE_CRON_JOBS_REGISTRATION: "true"
      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
      APP_SECRET: ${APP_SECRET:-replace_me_with_a_random_string}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      db-wait:
        condition: service_completed_successfully
      server:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks: [dev-net]

  fundraising-service:
    build:
      context: ./services/fundraising-service
      dockerfile: Dockerfile
    ports:
      - "4500:4500"
    env_file:
      - .env
    environment:
      PORT: 4500
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: fundraising
      DB_USER: ${PG_DATABASE_USER:-postgres}
      DB_PASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      TWENTY_API_KEY: ${TWENTY_API_KEY:-}
      TWENTY_API_BASE_URL: ${TWENTY_API_BASE_URL:-http://server:3000/rest}
    healthcheck:
      test: ["CMD-SHELL","node -e \"fetch('http://localhost:4500/health',{cache:'no-store'}).then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    restart: on-failure:5
    networks: [dev-net]

  gateway:
    image: nginx:alpine
    ports:
      - "4000:80"
    volumes:
      - ./nginx/gateway.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      server:
        condition: service_healthy
      fundraising-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks: [dev-net]

volumes:
  db-data:
  server-local-data:

networks:
  dev-net:
    driver: bridge
